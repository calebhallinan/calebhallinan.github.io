install.packages("rmarkdown")
R.session
sessionInfo()
### install and read in packages
library(rmarkdown)
library(tidyverse) # for dataframes
library(here) # for use of others if downloaded
library(png) # for reading png images
library(magick) # for reading in images
library(imager) # for plotting
### Grabbing the data
# url to flag data, it is in zip file
url = "https://github.com/hampusborgos/country-flags/archive/refs/heads/main.zip"
# specify the file name and location where you want to save the file on your computer
file_name = "flags.zip"
file_path = here()
# use the download.file() function
download.file(url, paste(file_path, file_name, sep = "/"), mode = "wb")
# unzip zip file
unzip(paste0(here(), "/flags.zip"), exdir = here())
# get file names
files = list.files(here("country-flags-main/png250px/"), full.names = TRUE)
# Read each image file in the folder
image_list = lapply(files, image_read)
# image_list = lapply(files, readPNG)
# NOTE: so each image is the same height but very different widths lol. Let's change that
# Set height and width I want
max_height = 250
max_width = 250
# Resize all the images to the specified height and width
# had to add matte=FALSE to get rid of extra channel
resized_images = lapply(image_list, function(im) {
image_convert(image_scale(im, paste0(max_width, "x", max_height, "!")), format = "png", matte=FALSE)
})
# Create the directory to save the resized images
dir.create("resized_png250px")
# Save the resized images with the same names as the original files
for (i in seq_along(resized_images)) {
# Extract the file name from the full path
file_name = basename(files[i])
# make the file path for saving the resized image
save_path = file.path("resized_png250px", file_name)
# Write the resized image to the specified file path
image_write(resized_images[[i]], save_path)
}
# now grab them with png package
resized_files = list.files(here("resized_png250px/"), full.names = TRUE)
# use function readPNG
imgs_final = lapply(resized_files, readPNG)
# QC: check each image is same dimensions
# for (i in seq_along(imgs_final)) {
#   dimensions = dim(imgs_final[[i]])
#   cat("Image", i, "Dimensions:", dimensions[1], "x", dimensions[2], "x", dimensions[3], "\n")
# }
# great!
# Get the number of images in the list
num_images = length(image_list)
# Create an empty matrix to store the flattened images
image_matrix = matrix(NA, nrow = num_images, ncol = 250 * 250 * 3)
# Flatten each image and store it as a column in the matrix
for (i in 1:num_images) {
# get the flatten vector
flattened_image = as.vector(imgs_final[[i]])
# add to matrix
image_matrix[i,] = flattened_image
}
num_images
dim(imgs_final)
imgs_final
resized_files
# Create the directory to save the resized images
dir.create("resized_png250px")
# now grab them with png package
resized_files = list.files(here("resized_png250px/"), full.names = TRUE)
resized_files
here("resized_png250px/")
list.files(here("resized_png250px/"), full.names = TRUE)
# now grab them with png package
resized_files = list.files(here("blog/resized_png250px/"), full.names = TRUE)
resized_files
here("blog/resized_png250px/")
# now grab them with png package
resized_files = list.files(here("blog/pca-on-images/resized_png250px/"), full.names = TRUE)
resized_files
# now grab them with png package
resized_files = list.files(here("blog/pca-on-images/resized_png250px"), full.names = TRUE)
resized_files
# now grab them with png package
resized_files = list.files(here("blog/pca-on-images/resized_png250px/"), full.names = TRUE)
resized_files
